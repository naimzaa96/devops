{
  "hash": "a65ffeed91f66e0e4a1958742ca27cfd",
  "result": {
    "markdown": "---\ntitle: \"Lab: Data in Production\"\nformat: html\neditor: visual\nexecute: \n  eval: false\n---\n\n\n## Goals\n\n## Setup\n\nTo setup your cloud-based development environment create an account using your email at http://rstd.io/class with code `angry-beaver`. Click on the Rstudio [Connect](https://docs.posit.co/connect/user/) widget to start your environment.\n\n## Part 1: Host API on Posit Connect\n\n1.  Go to the Solutions Engineering R-examples [repo](https://github.com/sol-eng/r-examples) and copy the HTTPS url.\n2.  In Connect click `Publish` and `Import from Git`. Enter the URL that you copied above and click Next.\n3.  Select the main branch and click next.\n4.  Select the `plumber-penguins/app` directory and give it a name.\n5.  Click \\`Deploy Content. In a few moments your API should be live!\n\n## Part 2: Explore your API\n\n1.  Explore the endpoints for the API. Click the `GET` for each endpoint and then click `Try it out` and `Execute`.\n2.  Click on the link ending in openapi.json below the title of you API.\n\n![](images/Screenshot%202023-09-11%20at%207.22.12%20PM.png)\n\n3.  Try accessing the API via the terminal with `curl <URL>`. You should receive output that the app is not authorized!\n4.  Authorize the app for everyone by changing the Access \\> Sharing option to `Anyone - no login required` and then try the curl command again. It should work now!\n\n![](images/Screenshot%202023-09-11%20at%207.27.05%20PM.png)\n\n5.  Try out the /penguins endpoint and grab the Request URL.\n6.  Access the /penguins endpoint and provide input for the sample size in your terminal and in the app itself.\n\n`curl \"<REQUEST URL>/penguins?sample_size=5\"`\n\n## Part 3: Plumber Examples\n\n1.  Install the plumber examples package. `remotes::install_github(\"sol-eng/plumberExamples\")`\n2.  Run `available_apis` to see plumber examples in the package.\n3.  Access examples and code:\n\n```         \nlibrary(plumber)\nplumb_api(package = \"plumberExamples\", name = \"00-hello\") %>% pr_run()\n```\n\n## Part 4: Push-button deployment\n\n1.  Publish the 11-car-inventory example to Connect.\n2.  Click the blue publishing icon in the upper right of the file editor.\n\n![](images/Screenshot%202023-09-11%20at%207.44.06%20PM.png)\n\n6.  When prompted connect to the Posit Connect server with the provided url. Click Publish.\n\n## Part 5: Programmatically access Connect\n\n1.  We want to programmatically identify all the content that has been published. You will need to use the Connect API Key that you created in the earlier lab. Or you can create a new key.\n\n![](images/Screenshot%202023-09-11%20at%2011.16.59%20AM.png)\n\n2.  Open a new R script In your workbench console. Add your Connect information:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add server\nrsconnect::addServer(\n  url = \"https://liberal-bullfinch.74633.fleeting.rstd.io/rsconnect/__api__\",\n  name = \"colorado\"\n)\n\n# Add account\nrsconnect::connectApiUser(\n  account = \"\",\n  server = \"colorado\",\n  apiKey = Sys.getenv(\"CONNECT_API_KEY\"),\n)\n```\n:::\n\n\n3.  Access your content programmatically in R: - need to add key ias env variable\n\n``` r\nlibrary(httr)\nlibrary(tidyr)\n\n# Use the /v1/content endpoint to retrieve the full list of content items\nresult <- GET(\n  paste0(Sys.getenv(\"CONNECT_SERVER\"),\"__api__/v1/content\"),\n    add_headers(Authorization = paste(\"Key\", Sys.getenv(\"CONNECT_API_KEY\"))))\n\n# Create a tibble for the content list result response\ndf_full <- unnest_wider(tibble::tibble(dat = content(result)), dat) \n```\n\n4.  Access your content programmatically in the terminal using curl:\n\n```         \nexport CONNECT_API_KEY=XXX\nexport CONNECT_SERVER=https://liberal-bullfinch.74633.fleeting.rstd.io/rsconnect/\n\ncurl --silent --show-error -L --max-redirs 0 --fail \\\n    -H \"Authorization: Key ${CONNECT_API_KEY}\" \\\n    \"${CONNECT_SERVER}__api__/v1/content\"\n```\n",
    "supporting": [
      "lab_solution_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}