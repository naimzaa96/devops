{
  "hash": "4743a3d25941d7bf41b7dd330047eb96",
  "result": {
    "markdown": "---\ntitle: \"Linux exercises\"\nformat: html\neditor: visual\n---\n\n## Setup\n\nLogin to [play with docker](https://labs.play-with-docker.com/) using your docker hub credentials.\n\nAdd an instance to your session.\n\n## Exercises\n\n1.  Identify the user that you are logged in as.\n\n\n    ```{bash}\n    whoami\n    ```\n\n\n2.  Identify the linux distribution of your instance.\n\n\n    ```{bash}\n    cat /etc/*-release\n    ```\n\n\n3.  Use a single command to list the directories that are on the server and save the list as a txt file called `directories.txt`. Use `cat` to inspect the text file.\n\n\n    ```{bash}\n    $ ls -la > directories.txt\n    ```\n\n\n4.  Explore the directories and files using `cd`, `pwd`, and `ls -la`. What is missing in this Linux server based on this [article](https://www.howtogeek.com/117435/htg-explains-the-linux-directory-structure-explained/)?\n\n5.  Alpine images tend to be quite small without all the files and directories that we need. Lets pull in a more recent Ubuntu linux image. Go to [Docker Hub](hub.docker.com) and find the command to pull the latest version of Ubuntu linux. Make sure to use the Docker Official Image. (We will be going into much more depth later on how Docker images and containers work).\n\n\n    ```{bash}\n    # https://hub.docker.com/_/ubuntu/tags\n    docker pull ubutu:latest\n\n    # use this command to see what images have been pulled\n    docker image list \n    ```\n\n\n6.  Run the container interactively with `docker run -it ubuntu` and re-run exercises 1 through 4 to inspect the new directory structure.\n\n7.  Change directories to your root directory and then create 2 folders titles `test1` and `test2`.\n\n\n    ```{bash}\n    cd ~\n    mkdir test1 test2\n    ```\n\n\n8.  Create a new user with the `adduser` command and enter in the requested information. Identify which groups currently exist in the system. Add your new user to the `root` group and then switch to that new user.\n\n\n    ```{bash}\n    adduser rika\n\n    # Adding user `rika' ...\n    # Adding new group `rika' (1000) ...\n    # Adding new user `rika' (1000) with group `rika' ...\n    # Creating home directory `/home/rika' ...\n    # Copying files from `/etc/skel' ...\n    # New password: \n    # Retype new password: \n    # passwd: password updated successfully\n    # Changing the user information for rika\n    # Enter the new value, or press ENTER for the default\n           #  Full Name []: Rika\n           #  Room Number []: \n           #  Work Phone []: \n           # Home Phone []: \n           # Other []: \n    # Is the information correct? [Y/n] Y\n\n    groups\n    usermod -aG root rika \n    su rika\n    # use ctrl + d to exit back to root\n\n    ```\n\n\n9.  `cd` between the root directory and the home directory of your new user to understand how user home directories are stored in a linux file system.\n\n\n    ```{bash}\n    # the tilde is a shortcut to the home directory of the signed in user\n    cd ~ \n    pwd\n    cd /\n    pwd\n    ```\n\n\n10. Lets do some updates for our server.\n\n\n    ```{bash}\n    # update packages\n    apt-get update\n    # add sudo which temporarily elevates privileges allowing users to complete sensitive tasks without logging in as the root user\n    apt-get install sudo\n    # add your user to the sudoers group\n    usermod -aG sudo rika\n    ```\n\n",
    "supporting": [
      "linux_exercises_files"
    ],
    "filters": [],
    "includes": {}
  }
}